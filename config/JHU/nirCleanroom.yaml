geometry:

  # Affine/Projective transforms have awful residual structures, > 30 pix
  # So switch to more opaque polynomial pairs.
  #
  transformClass: skimage.transform.ProjectiveTransform
  transformCoeffs:
    - [[ 7.28221767e-03,  1.96742380e-04, -3.36870215e+02],
       [ 1.28388579e-05,  7.08578809e-03, -5.67919079e+02],
       [ 4.12862303e-10,  9.95802613e-08,  9.62844698e-01]]
# Aim for 7k ADU in 3-reads
leds:
  wave: [1300, 1200, 1085, 1070, 1050, 970, 930]
  dutyCycle: [15.0, 5.0, 30, 33, 15, 15, 13]
  focusOffset: [4.0, 0, 0, 0, 0, 0, -10.0]
  position: [112, 432, 1396, 1639, 1822, 3250, 3996]

#
mono:
  use: [True, True, True, True, True]
  wave: [1260, 1180, 1100, 1020, 940]
  dutyCycle: [100, 100, 100, 100, 100]
  positionMM: [-29.450, -14.135, 0.721, 15.290, 29.700]

rowsMM:  [-30.03, -21.0, -14.99, 0, 14.99, 21.00, 30.03]

# Per detector tweaks to positions, with a dictionary of (wave, rows) -> (xoff, yoff)
# But we have to save the keys as strings. Python encodes tuples with spaces
# after the commas: make sure we match that here. Both wave and row should be ints.
#
nudges:
  n3: 
    (1260, 45): [10, -8]
    (1260, 648): [-5, -5]
    (1260, 1048): [5, -5]
    (1260, 3047): [10,-10]
    (1260, 3448): [-5, 5]
    (1260, 4050): [4, -33]
  
    (1180, 45): [10, -5]
    (1180, 4050): [5, -25]

    (1100, 1433): [0, -10]
    (1100, 4050): [13, -25]

    (1020, 45): [-20, 0]
    (1020, 1048): [-5, 5]
    (1020, 4050): [-12, -15]

    (940, 45): [0, -5]
    (940, 648): [-8, 0]
    (940, 1048): [0, -5]
    (940, 3047): [-5, 0]
    (940, 3448): [20, 5]
    (940, 4050): [0, -34]
  
pix0:
  n3:
    (1260, 45): [73.0, 42.0]
    (1260, 648): [68.0, 646.0]
    (1260, 1048): [83.0, 1044.0]
    (1260, 2048): [85.0, 2044.0]
    (1260, 3047): [94.0, 3040.0]
    (1260, 3448): [77.0, 3465.0]
    (1260, 4050): [79.0, 4052.0]

    (1180, 45): [1107.0, 56.0]
    (1180, 648): [1100.0, 657.0]
    (1180, 1048): [1103.0, 1052.0]
    (1180, 2048): [1106.0, 2045.0]
    (1180, 3047): [1107.0, 3047.0]
    (1180, 3448): [1106.0, 3455.0]
    (1180, 4050): [1110.0, 4050.0]

    (1100, 45): [2090.0, 63.0]
    (1100, 648): [2090.0, 657.0]
    (1100, 1048): [2090.0, 1053.0]
    (1100, 2048): [2091.0, 2044.0]
    (1100, 3047): [2091.0, 3046.0]
    (1100, 3448): [2091.0, 3451.0]
    (1100, 4050): [2104.0, 4045.0]

    (1020, 45): [3044.0, 61.0]
    (1020, 648): [3060.0, 657.0]
    (1020, 1048): [3053.0, 1056.0]
    (1020, 2048): [3057.0, 2044.0]
    (1020, 3047): [3057.0, 3047.0]
    (1020, 3448): [3057.0, 3453.0]
    (1020, 4050): [3046.0, 4058.0]

    (940, 45): [4039.0, 45.0]
    (940, 648): [4021.0, 651.0]
    (940, 1048): [4025.0, 1043.0]
    (940, 2048): [4020.0, 2043.0]
    (940, 3047): [4016.0, 3049.0]
    (940, 3448): [4043.0, 3464.0]
    (940, 4050): [4028.0, 4047.0]

