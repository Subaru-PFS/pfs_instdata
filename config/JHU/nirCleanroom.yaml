geometry:

  # Affine/Projective transforms have awful residual structures, > 30 pix
  # So switch to more opaque polynomial pairs.
  #
  transformClass: skimage.transform.ProjectiveTransform
  transformCoeffs:
    - [[ 7.28221767e-03,  1.96742380e-04, -3.36870215e+02],
       [ 1.28388579e-05,  7.08578809e-03, -5.67919079e+02],
       [ 4.12862303e-10,  9.95802613e-08,  9.62844698e-01]]
# Aim for 7k ADU in 3-reads
leds:
  wave: [1300, 1200, 1085, 1070, 1050, 970, 930]
  dutyCycle: [15.0, 5.0, 30, 33, 15, 15, 13]
  focusOffset: [4.0, 0, 0, 0, 0, 0, -10.0]
  position: [112, 432, 1396, 1639, 1822, 3250, 3996]

#
mono:
  use: [True, True, True, True, True]
  wave: [1260, 1180, 1100, 1020, 940]
  dutyCycle: [100, 100, 100, 100, 100]
  positionMM: [-29.450, -14.135, 0.721, 15.290, 29.700]

rowsMM:  [-30.03, -21.0, -14.99, 0, 14.99, 21.00, 30.03]

# Per detector tweaks to positions, with a dictionary of (wave, rows) -> (xoff, yoff)
# But we have to save the keys as strings. Python encodes tuples with spaces
# after the commas: make sure we match that here. Both wave and row should be ints.
#
nudges:
  n3: 
    (1260, 3283): [10, 5]
    (1260, 2666): [10, 0]

    (1180, 3900): [-5,-10]
    (1180, 2666): [-5, -5]
    (1180, 1433): [10, 0]
    (1180, 200): [0, -10]

    (1100, 3900): [0, 10]
    (1100, 3283): [0, 10]
    (1100, 1433): [0, -10]

    (1020, 3900): [5, -10]
    (1020, 3263): [5, 5]
    (1020, 2666): [-10, 0]
    (1020, 1433): [0, 10]
    (1020, 816): [0, 10]
    (1020, 200): [5, 5]

    (940, 3900): [0, -5]
    (940, 816): [-10, 0]
    (940, 200): [0, -10]

pix0:
  n3:
    (1260, 3900): [74.0, 3929.0]
    (1260, 3283): [91.0, 3298.0]
    (1260, 2666): [93.0, 2664.0]
    (1260, 2050): [83.0, 2045.0]
    (1260, 1433): [81.0, 1430.0]
    (1260, 816): [75.0, 817.0]
    (1260, 200): [66.0, 202.0]
    (1180, 3900): [1097.0, 3909.0]
    (1180, 3283): [1105.0, 3287.0]
    (1180, 2666): [1101.0, 2657.0]
    (1180, 2050): [1105.0, 2045.0]
    (1180, 1433): [1114.0, 1432.0]
    (1180, 816): [1101.0, 822.0]
    (1180, 200): [1098.0, 202.0]
    (1100, 3900): [2089.0, 3927.0]
    (1100, 3283): [2089.0, 3295.0]
    (1100, 2666): [2090.0, 2662.0]
    (1100, 2050): [2091.0, 2045.0]
    (1100, 1433): [2091.0, 1423.0]
    (1100, 816): [2090.0, 823.0]
    (1100, 200): [2090.0, 215.0]
    (1020, 3900): [3063.0, 3908.0]
    (1020, 3283): [3057.0, 3286.0]
    (1020, 2666): [3047.0, 2662.0]
    (1020, 2050): [3057.0, 2045.0]
    (1020, 1433): [3057.0, 1442.0]
    (1020, 816): [3059.0, 832.0]
    (1020, 200): [3068.0, 217.0]
    (940, 3900): [4026.0, 3922.0]
    (940, 3283): [4023.0, 3290.0]
    (940, 2666): [4021.0, 2664.0]
    (940, 2050): [4021.0, 2045.0]
    (940, 1433): [4024.0, 1429.0]
    (940, 816): [4019.0, 817.0]
    (940, 200): [4038.0, 193.0]  
